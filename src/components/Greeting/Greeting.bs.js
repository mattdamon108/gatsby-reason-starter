// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as String$YourProjectName from "../../atoms/String.bs.js";
import * as ApolloClient__React_Hooks_UseQuery from "reason-apollo-client/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.bs.js";

var Raw = {};

var query = (require("@apollo/client").gql`
  query GetStores($skip: Int!, $take: Int!)  {
    getStores(skip: $skip, take: $take)  {
      __typename
      ok
      error
      stores  {
        __typename
        id
        name
      }
    }
  }
`);

function parse(value) {
  var value$1 = value.getStores;
  var value$2 = value$1.error;
  var value$3 = value$1.stores;
  return {
          getStores: {
            __typename: value$1.__typename,
            ok: value$1.ok,
            error: !(value$2 == null) ? value$2 : undefined,
            stores: !(value$3 == null) ? value$3.map(function (value) {
                    if (!(value == null)) {
                      return {
                              __typename: value.__typename,
                              id: value.id,
                              name: value.name
                            };
                    }
                    
                  }) : undefined
          }
        };
}

function serialize(value) {
  var value$1 = value.getStores;
  var value$2 = value$1.stores;
  var stores = value$2 !== undefined ? value$2.map(function (value) {
          if (value === undefined) {
            return null;
          }
          var value$1 = value.name;
          var value$2 = value.id;
          var value$3 = value.__typename;
          return {
                  __typename: value$3,
                  id: value$2,
                  name: value$1
                };
        }) : null;
  var value$3 = value$1.error;
  var error = value$3 !== undefined ? value$3 : null;
  var value$4 = value$1.ok;
  var value$5 = value$1.__typename;
  var getStores = {
    __typename: value$5,
    ok: value$4,
    error: error,
    stores: stores
  };
  return {
          getStores: getStores
        };
}

function serializeVariables(inp) {
  return {
          skip: inp.skip,
          take: inp.take
        };
}

function makeVariables(skip, take, param) {
  return {
          skip: skip,
          take: take
        };
}

var GetStores_inner = {
  Raw: Raw,
  query: query,
  parse: parse,
  serialize: serialize,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables
};

var include = ApolloClient__React_Hooks_UseQuery.Extend({
      query: query,
      Raw: Raw,
      parse: parse,
      serialize: serialize,
      serializeVariables: serializeVariables
    });

var use = include.use;

var GetStores_refetchQueryDescription = include.refetchQueryDescription;

var GetStores_useLazy = include.useLazy;

var GetStores_useLazyWithVariables = include.useLazyWithVariables;

var GetStores = {
  Raw: Raw,
  query: query,
  parse: parse,
  serialize: serialize,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables,
  refetchQueryDescription: GetStores_refetchQueryDescription,
  use: use,
  useLazy: GetStores_useLazy,
  useLazyWithVariables: GetStores_useLazyWithVariables
};

function Greeting(Props) {
  var match = Curry.app(use, [
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        {
          skip: 0,
          take: 10
        }
      ]);
  var match$1 = match.data;
  var error = match.error;
  if (match.loading) {
    return "Loading...";
  }
  if (error !== undefined) {
    return "Error loading data" + error.message;
  }
  if (match$1 === undefined) {
    return "Something bad happened!";
  }
  var getStores = match$1.getStores;
  var tmp;
  if (getStores.ok) {
    var stores = getStores.stores;
    tmp = stores !== undefined ? Belt_Array.map(stores, (function (store) {
              if (store !== undefined) {
                return React.createElement("p", undefined, React.createElement(String$YourProjectName.make, {
                                text: store.name
                              }));
              } else {
                return React.createElement(String$YourProjectName.make, {
                            text: ""
                          });
              }
            })) : null;
  } else {
    tmp = null;
  }
  return React.createElement("div", undefined, tmp);
}

var make = Greeting;

export {
  GetStores_inner ,
  GetStores ,
  make ,
  
}
/* query Not a pure module */
